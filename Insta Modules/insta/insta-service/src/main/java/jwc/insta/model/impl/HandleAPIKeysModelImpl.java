/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package jwc.insta.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import jwc.insta.model.HandleAPIKeys;
import jwc.insta.model.HandleAPIKeysModel;

/**
 * The base model implementation for the HandleAPIKeys service. Represents a row in the &quot;JWC_HandleAPIKeys&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HandleAPIKeysModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HandleAPIKeysImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HandleAPIKeysImpl
 * @generated
 */
public class HandleAPIKeysModelImpl
	extends BaseModelImpl<HandleAPIKeys> implements HandleAPIKeysModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a handle api keys model instance should use the <code>HandleAPIKeys</code> interface instead.
	 */
	public static final String TABLE_NAME = "JWC_HandleAPIKeys";

	public static final Object[][] TABLE_COLUMNS = {
		{"handleAPIKeyId", Types.BIGINT}, {"handleName", Types.VARCHAR},
		{"pageKey", Types.VARCHAR}, {"apiKey", Types.VARCHAR},
		{"instagramWidgetFlag", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("handleAPIKeyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("handleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pageKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("apiKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("instagramWidgetFlag", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table JWC_HandleAPIKeys (handleAPIKeyId LONG not null primary key,handleName VARCHAR(75) null,pageKey VARCHAR(75) null,apiKey TEXT null,instagramWidgetFlag BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table JWC_HandleAPIKeys";

	public static final String ORDER_BY_JPQL =
		" ORDER BY handleAPIKeys.handleAPIKeyId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY JWC_HandleAPIKeys.handleAPIKeyId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long PAGEKEY_COLUMN_BITMASK = 1L;

	public static final long HANDLEAPIKEYID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public HandleAPIKeysModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _handleAPIKeyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHandleAPIKeyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _handleAPIKeyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HandleAPIKeys.class;
	}

	@Override
	public String getModelClassName() {
		return HandleAPIKeys.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HandleAPIKeys, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HandleAPIKeys, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HandleAPIKeys, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((HandleAPIKeys)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HandleAPIKeys, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HandleAPIKeys, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(HandleAPIKeys)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HandleAPIKeys, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HandleAPIKeys, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, HandleAPIKeys>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			HandleAPIKeys.class.getClassLoader(), HandleAPIKeys.class,
			ModelWrapper.class);

		try {
			Constructor<HandleAPIKeys> constructor =
				(Constructor<HandleAPIKeys>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<HandleAPIKeys, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<HandleAPIKeys, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<HandleAPIKeys, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<HandleAPIKeys, Object>>();
		Map<String, BiConsumer<HandleAPIKeys, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<HandleAPIKeys, ?>>();

		attributeGetterFunctions.put(
			"handleAPIKeyId", HandleAPIKeys::getHandleAPIKeyId);
		attributeSetterBiConsumers.put(
			"handleAPIKeyId",
			(BiConsumer<HandleAPIKeys, Long>)HandleAPIKeys::setHandleAPIKeyId);
		attributeGetterFunctions.put(
			"handleName", HandleAPIKeys::getHandleName);
		attributeSetterBiConsumers.put(
			"handleName",
			(BiConsumer<HandleAPIKeys, String>)HandleAPIKeys::setHandleName);
		attributeGetterFunctions.put("pageKey", HandleAPIKeys::getPageKey);
		attributeSetterBiConsumers.put(
			"pageKey",
			(BiConsumer<HandleAPIKeys, String>)HandleAPIKeys::setPageKey);
		attributeGetterFunctions.put("apiKey", HandleAPIKeys::getApiKey);
		attributeSetterBiConsumers.put(
			"apiKey",
			(BiConsumer<HandleAPIKeys, String>)HandleAPIKeys::setApiKey);
		attributeGetterFunctions.put(
			"instagramWidgetFlag", HandleAPIKeys::getInstagramWidgetFlag);
		attributeSetterBiConsumers.put(
			"instagramWidgetFlag",
			(BiConsumer<HandleAPIKeys, Boolean>)
				HandleAPIKeys::setInstagramWidgetFlag);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getHandleAPIKeyId() {
		return _handleAPIKeyId;
	}

	@Override
	public void setHandleAPIKeyId(long handleAPIKeyId) {
		_handleAPIKeyId = handleAPIKeyId;
	}

	@Override
	public String getHandleName() {
		if (_handleName == null) {
			return "";
		}
		else {
			return _handleName;
		}
	}

	@Override
	public void setHandleName(String handleName) {
		_handleName = handleName;
	}

	@Override
	public String getPageKey() {
		if (_pageKey == null) {
			return "";
		}
		else {
			return _pageKey;
		}
	}

	@Override
	public void setPageKey(String pageKey) {
		_columnBitmask |= PAGEKEY_COLUMN_BITMASK;

		if (_originalPageKey == null) {
			_originalPageKey = _pageKey;
		}

		_pageKey = pageKey;
	}

	public String getOriginalPageKey() {
		return GetterUtil.getString(_originalPageKey);
	}

	@Override
	public String getApiKey() {
		if (_apiKey == null) {
			return "";
		}
		else {
			return _apiKey;
		}
	}

	@Override
	public void setApiKey(String apiKey) {
		_apiKey = apiKey;
	}

	@Override
	public boolean getInstagramWidgetFlag() {
		return _instagramWidgetFlag;
	}

	@Override
	public boolean isInstagramWidgetFlag() {
		return _instagramWidgetFlag;
	}

	@Override
	public void setInstagramWidgetFlag(boolean instagramWidgetFlag) {
		_instagramWidgetFlag = instagramWidgetFlag;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, HandleAPIKeys.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HandleAPIKeys toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, HandleAPIKeys>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HandleAPIKeysImpl handleAPIKeysImpl = new HandleAPIKeysImpl();

		handleAPIKeysImpl.setHandleAPIKeyId(getHandleAPIKeyId());
		handleAPIKeysImpl.setHandleName(getHandleName());
		handleAPIKeysImpl.setPageKey(getPageKey());
		handleAPIKeysImpl.setApiKey(getApiKey());
		handleAPIKeysImpl.setInstagramWidgetFlag(isInstagramWidgetFlag());

		handleAPIKeysImpl.resetOriginalValues();

		return handleAPIKeysImpl;
	}

	@Override
	public int compareTo(HandleAPIKeys handleAPIKeys) {
		long primaryKey = handleAPIKeys.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof HandleAPIKeys)) {
			return false;
		}

		HandleAPIKeys handleAPIKeys = (HandleAPIKeys)obj;

		long primaryKey = handleAPIKeys.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		HandleAPIKeysModelImpl handleAPIKeysModelImpl = this;

		handleAPIKeysModelImpl._originalPageKey =
			handleAPIKeysModelImpl._pageKey;

		handleAPIKeysModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<HandleAPIKeys> toCacheModel() {
		HandleAPIKeysCacheModel handleAPIKeysCacheModel =
			new HandleAPIKeysCacheModel();

		handleAPIKeysCacheModel.handleAPIKeyId = getHandleAPIKeyId();

		handleAPIKeysCacheModel.handleName = getHandleName();

		String handleName = handleAPIKeysCacheModel.handleName;

		if ((handleName != null) && (handleName.length() == 0)) {
			handleAPIKeysCacheModel.handleName = null;
		}

		handleAPIKeysCacheModel.pageKey = getPageKey();

		String pageKey = handleAPIKeysCacheModel.pageKey;

		if ((pageKey != null) && (pageKey.length() == 0)) {
			handleAPIKeysCacheModel.pageKey = null;
		}

		handleAPIKeysCacheModel.apiKey = getApiKey();

		String apiKey = handleAPIKeysCacheModel.apiKey;

		if ((apiKey != null) && (apiKey.length() == 0)) {
			handleAPIKeysCacheModel.apiKey = null;
		}

		handleAPIKeysCacheModel.instagramWidgetFlag = isInstagramWidgetFlag();

		return handleAPIKeysCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HandleAPIKeys, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HandleAPIKeys, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HandleAPIKeys, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((HandleAPIKeys)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<HandleAPIKeys, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<HandleAPIKeys, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HandleAPIKeys, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((HandleAPIKeys)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, HandleAPIKeys>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _handleAPIKeyId;
	private String _handleName;
	private String _pageKey;
	private String _originalPageKey;
	private String _apiKey;
	private boolean _instagramWidgetFlag;
	private long _columnBitmask;
	private HandleAPIKeys _escapedModel;

}