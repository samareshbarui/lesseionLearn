/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package jwc.insta.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import jwc.insta.model.InstaSiteImages;
import jwc.insta.model.InstaSiteImagesModel;

/**
 * The base model implementation for the InstaSiteImages service. Represents a row in the &quot;JWC_InstaSiteImages&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>InstaSiteImagesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InstaSiteImagesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see InstaSiteImagesImpl
 * @generated
 */
public class InstaSiteImagesModelImpl
	extends BaseModelImpl<InstaSiteImages> implements InstaSiteImagesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a insta site images model instance should use the <code>InstaSiteImages</code> interface instead.
	 */
	public static final String TABLE_NAME = "JWC_InstaSiteImages";

	public static final Object[][] TABLE_COLUMNS = {
		{"instaSiteImageId", Types.BIGINT}, {"pageKey", Types.VARCHAR},
		{"mediaUrl", Types.VARCHAR}, {"instaimageUrl", Types.VARCHAR},
		{"timestamp", Types.VARCHAR}, {"otherDetid", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("instaSiteImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pageKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mediaUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("instaimageUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timestamp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherDetid", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table JWC_InstaSiteImages (instaSiteImageId LONG not null primary key,pageKey VARCHAR(75) null,mediaUrl TEXT null,instaimageUrl TEXT null,timestamp VARCHAR(75) null,otherDetid LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table JWC_InstaSiteImages";

	public static final String ORDER_BY_JPQL =
		" ORDER BY instaSiteImages.instaSiteImageId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY JWC_InstaSiteImages.instaSiteImageId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long INSTAIMAGEURL_COLUMN_BITMASK = 1L;

	public static final long MEDIAURL_COLUMN_BITMASK = 2L;

	public static final long PAGEKEY_COLUMN_BITMASK = 4L;

	public static final long TIMESTAMP_COLUMN_BITMASK = 8L;

	public static final long INSTASITEIMAGEID_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public InstaSiteImagesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _instaSiteImageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInstaSiteImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _instaSiteImageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return InstaSiteImages.class;
	}

	@Override
	public String getModelClassName() {
		return InstaSiteImages.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<InstaSiteImages, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<InstaSiteImages, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<InstaSiteImages, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((InstaSiteImages)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<InstaSiteImages, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<InstaSiteImages, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(InstaSiteImages)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<InstaSiteImages, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<InstaSiteImages, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, InstaSiteImages>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			InstaSiteImages.class.getClassLoader(), InstaSiteImages.class,
			ModelWrapper.class);

		try {
			Constructor<InstaSiteImages> constructor =
				(Constructor<InstaSiteImages>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<InstaSiteImages, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<InstaSiteImages, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<InstaSiteImages, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<InstaSiteImages, Object>>();
		Map<String, BiConsumer<InstaSiteImages, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<InstaSiteImages, ?>>();

		attributeGetterFunctions.put(
			"instaSiteImageId", InstaSiteImages::getInstaSiteImageId);
		attributeSetterBiConsumers.put(
			"instaSiteImageId",
			(BiConsumer<InstaSiteImages, Long>)
				InstaSiteImages::setInstaSiteImageId);
		attributeGetterFunctions.put("pageKey", InstaSiteImages::getPageKey);
		attributeSetterBiConsumers.put(
			"pageKey",
			(BiConsumer<InstaSiteImages, String>)InstaSiteImages::setPageKey);
		attributeGetterFunctions.put("mediaUrl", InstaSiteImages::getMediaUrl);
		attributeSetterBiConsumers.put(
			"mediaUrl",
			(BiConsumer<InstaSiteImages, String>)InstaSiteImages::setMediaUrl);
		attributeGetterFunctions.put(
			"instaimageUrl", InstaSiteImages::getInstaimageUrl);
		attributeSetterBiConsumers.put(
			"instaimageUrl",
			(BiConsumer<InstaSiteImages, String>)
				InstaSiteImages::setInstaimageUrl);
		attributeGetterFunctions.put(
			"timestamp", InstaSiteImages::getTimestamp);
		attributeSetterBiConsumers.put(
			"timestamp",
			(BiConsumer<InstaSiteImages, String>)InstaSiteImages::setTimestamp);
		attributeGetterFunctions.put(
			"otherDetid", InstaSiteImages::getOtherDetid);
		attributeSetterBiConsumers.put(
			"otherDetid",
			(BiConsumer<InstaSiteImages, Long>)InstaSiteImages::setOtherDetid);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getInstaSiteImageId() {
		return _instaSiteImageId;
	}

	@Override
	public void setInstaSiteImageId(long instaSiteImageId) {
		_instaSiteImageId = instaSiteImageId;
	}

	@Override
	public String getPageKey() {
		if (_pageKey == null) {
			return "";
		}
		else {
			return _pageKey;
		}
	}

	@Override
	public void setPageKey(String pageKey) {
		_columnBitmask |= PAGEKEY_COLUMN_BITMASK;

		if (_originalPageKey == null) {
			_originalPageKey = _pageKey;
		}

		_pageKey = pageKey;
	}

	public String getOriginalPageKey() {
		return GetterUtil.getString(_originalPageKey);
	}

	@Override
	public String getMediaUrl() {
		if (_mediaUrl == null) {
			return "";
		}
		else {
			return _mediaUrl;
		}
	}

	@Override
	public void setMediaUrl(String mediaUrl) {
		_columnBitmask |= MEDIAURL_COLUMN_BITMASK;

		if (_originalMediaUrl == null) {
			_originalMediaUrl = _mediaUrl;
		}

		_mediaUrl = mediaUrl;
	}

	public String getOriginalMediaUrl() {
		return GetterUtil.getString(_originalMediaUrl);
	}

	@Override
	public String getInstaimageUrl() {
		if (_instaimageUrl == null) {
			return "";
		}
		else {
			return _instaimageUrl;
		}
	}

	@Override
	public void setInstaimageUrl(String instaimageUrl) {
		_columnBitmask |= INSTAIMAGEURL_COLUMN_BITMASK;

		if (_originalInstaimageUrl == null) {
			_originalInstaimageUrl = _instaimageUrl;
		}

		_instaimageUrl = instaimageUrl;
	}

	public String getOriginalInstaimageUrl() {
		return GetterUtil.getString(_originalInstaimageUrl);
	}

	@Override
	public String getTimestamp() {
		if (_timestamp == null) {
			return "";
		}
		else {
			return _timestamp;
		}
	}

	@Override
	public void setTimestamp(String timestamp) {
		_columnBitmask |= TIMESTAMP_COLUMN_BITMASK;

		if (_originalTimestamp == null) {
			_originalTimestamp = _timestamp;
		}

		_timestamp = timestamp;
	}

	public String getOriginalTimestamp() {
		return GetterUtil.getString(_originalTimestamp);
	}

	@Override
	public long getOtherDetid() {
		return _otherDetid;
	}

	@Override
	public void setOtherDetid(long otherDetid) {
		_otherDetid = otherDetid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, InstaSiteImages.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public InstaSiteImages toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, InstaSiteImages>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InstaSiteImagesImpl instaSiteImagesImpl = new InstaSiteImagesImpl();

		instaSiteImagesImpl.setInstaSiteImageId(getInstaSiteImageId());
		instaSiteImagesImpl.setPageKey(getPageKey());
		instaSiteImagesImpl.setMediaUrl(getMediaUrl());
		instaSiteImagesImpl.setInstaimageUrl(getInstaimageUrl());
		instaSiteImagesImpl.setTimestamp(getTimestamp());
		instaSiteImagesImpl.setOtherDetid(getOtherDetid());

		instaSiteImagesImpl.resetOriginalValues();

		return instaSiteImagesImpl;
	}

	@Override
	public int compareTo(InstaSiteImages instaSiteImages) {
		long primaryKey = instaSiteImages.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof InstaSiteImages)) {
			return false;
		}

		InstaSiteImages instaSiteImages = (InstaSiteImages)obj;

		long primaryKey = instaSiteImages.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		InstaSiteImagesModelImpl instaSiteImagesModelImpl = this;

		instaSiteImagesModelImpl._originalPageKey =
			instaSiteImagesModelImpl._pageKey;

		instaSiteImagesModelImpl._originalMediaUrl =
			instaSiteImagesModelImpl._mediaUrl;

		instaSiteImagesModelImpl._originalInstaimageUrl =
			instaSiteImagesModelImpl._instaimageUrl;

		instaSiteImagesModelImpl._originalTimestamp =
			instaSiteImagesModelImpl._timestamp;

		instaSiteImagesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<InstaSiteImages> toCacheModel() {
		InstaSiteImagesCacheModel instaSiteImagesCacheModel =
			new InstaSiteImagesCacheModel();

		instaSiteImagesCacheModel.instaSiteImageId = getInstaSiteImageId();

		instaSiteImagesCacheModel.pageKey = getPageKey();

		String pageKey = instaSiteImagesCacheModel.pageKey;

		if ((pageKey != null) && (pageKey.length() == 0)) {
			instaSiteImagesCacheModel.pageKey = null;
		}

		instaSiteImagesCacheModel.mediaUrl = getMediaUrl();

		String mediaUrl = instaSiteImagesCacheModel.mediaUrl;

		if ((mediaUrl != null) && (mediaUrl.length() == 0)) {
			instaSiteImagesCacheModel.mediaUrl = null;
		}

		instaSiteImagesCacheModel.instaimageUrl = getInstaimageUrl();

		String instaimageUrl = instaSiteImagesCacheModel.instaimageUrl;

		if ((instaimageUrl != null) && (instaimageUrl.length() == 0)) {
			instaSiteImagesCacheModel.instaimageUrl = null;
		}

		instaSiteImagesCacheModel.timestamp = getTimestamp();

		String timestamp = instaSiteImagesCacheModel.timestamp;

		if ((timestamp != null) && (timestamp.length() == 0)) {
			instaSiteImagesCacheModel.timestamp = null;
		}

		instaSiteImagesCacheModel.otherDetid = getOtherDetid();

		return instaSiteImagesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<InstaSiteImages, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<InstaSiteImages, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<InstaSiteImages, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((InstaSiteImages)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<InstaSiteImages, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<InstaSiteImages, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<InstaSiteImages, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((InstaSiteImages)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, InstaSiteImages>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _instaSiteImageId;
	private String _pageKey;
	private String _originalPageKey;
	private String _mediaUrl;
	private String _originalMediaUrl;
	private String _instaimageUrl;
	private String _originalInstaimageUrl;
	private String _timestamp;
	private String _originalTimestamp;
	private long _otherDetid;
	private long _columnBitmask;
	private InstaSiteImages _escapedModel;

}